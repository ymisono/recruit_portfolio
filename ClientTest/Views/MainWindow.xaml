<Window x:Class="ClientTest.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ClientTest.Views"
        xmlns:vm="clr-namespace:ClientTest.ViewModels"
        Title="MainWindow" Height="500" Width="620">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->



        <!--失敗表示メッセージボックス-->
        <l:InteractionMessageTrigger MessageKey="Error" Messenger="{Binding Messenger}">
            <l:InformationDialogInteractionMessageAction />
        </l:InteractionMessageTrigger>

        <!--画面遷移トリガー-->
        <l:InteractionMessageTrigger MessageKey="Transition" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:LoginView}" Mode="Modal"/>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <Grid FocusManager.FocusedElement="{Binding ElementName=MemoBox}">
        <Grid.RowDefinitions>
            <RowDefinition Height="0.25*" />
            <RowDefinition Height="2*" />
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" VerticalAlignment="Center" Background="DarkSeaGreen" >
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10" >
                <Button Width="70" Height="30" Margin="0 0 20 0" Content="新規登録" Command="{Binding RegisterCommand}" Visibility="Collapsed" />
                <Button Width="70" Height="30" Content="ログアウト" Command="{Binding LogoutCommand}" />
            </StackPanel>
        </StackPanel>
        <Button Grid.Row="0" HorizontalAlignment="Right" VerticalAlignment="Center" Command="{Binding LoginCommand}" Content="{Binding MyName}" Foreground="White" Margin="0 0 5 0" Padding="10 3">
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="Background" Value="{x:Null}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="White" BorderThickness="1" Padding="10 3">
                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <!--ログイン名の表示状態を変更するトリガー-->
                        <DataTrigger Binding="{Binding IsLoggedIn}" Value="True" >
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True" >
                            <Trigger.Setters>
                                <Setter Property="Background" Value="Firebrick" />
                            </Trigger.Setters>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <!--ユーザー名表示-->
        <Grid Grid.Row="1" HorizontalAlignment="Stretch" >

        </Grid>
        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="8*" />
                <RowDefinition Height="1*" />
            </Grid.RowDefinitions>
            <Label Content="クラウドメモ帳（書いた事が保存されるよ！）" FontSize="19" />
            <TextBox Name="MemoBox" Grid.Row="1" AcceptsReturn="True" TextWrapping="Wrap" Text="{Binding memoText}" Margin="15 0 15 0" Grid.ColumnSpan="2" />
            <Button Grid.Row="2" Margin="0,8,30,8" Width="70" HorizontalAlignment="Right" Content="保存"
                    Command="{Binding SaveCommand}" Grid.Column="1"/>
        </Grid>

    </Grid>
</Window>
